class Article(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    text = db.Column(db.Text, nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    is_approved = db.Column(db.Boolean, default=False)
    domain = db.Column(db.String(500))
    links = db.Column(db.Text)  # Stores JSON
    authors = db.Column(db.String(1000))
    publicationDate = db.Column(db.DateTime)
    extractionDate = db.Column(db.DateTime, default=datetime.utcnow)
    statements = db.relationship('Statement', back_populates='article', cascade='all, delete-orphan')
    references = db.relationship('Reference', back_populates='article', cascade='all, delete-orphan')

    def set_links(self, links):
        self.links = json.dumps(links)

    def get_links(self):
        return json.loads(self.links) if self.links else []

    def get_share_url(self):
        return url_for('main.article', id=self.id, _external=True)

    def get_facebook_share_url(self):
        return f"https://www.facebook.com/sharer/sharer.php?u={quote(self.get_share_url())}"

    def get_twitter_share_url(self):
        return f"https://twitter.com/intent/tweet?url={quote(self.get_share_url())}&text={quote(self.title)}"

    def get_linkedin_share_url(self):
        return f"https://www.linkedin.com/shareArticle?url={quote(self.get_share_url())}&title={quote(self.title)}"

    def get_references(self):
        return self.references

    def set_statements(self, statements):
        for statement in statements:
            new_statement = Statement(content=statement, article=self)
            db.session.add(new_statement)

    def set_references(self, references):
        for ref in references:
            new_reference = Reference(
                statement=ref['statement'],
                verdict=ref['verdict'],
                article=self
            )
            new_reference.set_context(ref['context'])
            db.session.add(new_reference)